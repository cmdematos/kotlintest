/*
	All the previous configuration work makes it possible to encapsulate most of the details needed for kotlin
	testing support in a script plugin.

	Test language: Kotlin
	Test framework: Spek2
	Assertion framework: Kluent
	Mocking: Mockk
 */

/*
	Normally, we'd configure testImplementation and testRuntimeOnly directly.
	(In a full Kotlin project, the stdlib would move up to implementation.)

	But if a project uses testFixtures, then we want to make sure that both test and testFixtures configurations
	have access to the stdlib and test framework dependencies.  It's easiest to define these at the testFixtures
	level and extend that.  To do that, we have to make sure that the testFixtures configurations exist.  This will
	work whether the target project decides to use the java-test-fixtures plugin or not.

	See: https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures
	See: https://youtrack.jetbrains.com/issue/KT-34901 (may not be an issue in this case)
 */
configurations {
	testFixturesImplementation
	testFixturesRuntimeOnly
	testImplementation.extendsFrom testFixturesImplementation
	testRuntimeOnly.extendsFrom testFixturesRuntimeOnly
}

dependencies {
	testFixturesImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
	testFixturesRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

	testFixturesImplementation "org.spekframework.spek2:spek-dsl-jvm:${spekVersion}"
	testFixturesRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:${spekVersion}"

	testFixturesImplementation "org.amshove.kluent:kluent:${kluentVersion}"
	testFixturesImplementation "io.mockk:mockk:${mockkVersion}"

	// JUnit is not used directly in the IDE (the Spek Framework plugin handles test runs), but it's needed for test runs in Gradle.
	testFixturesImplementation "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}"
	testFixturesRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"
}

compileTestKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

sourceSets {
	// Java code can be placed in the Kotlin source tree, but for it to be on the runtime classpath, it needs
	// to be added to the Java source set.  See https://kotlinlang.org/docs/reference/using-gradle.html#targeting-the-jvm
	testFixtures {
		java {
			srcDirs += 'src/testFixtures/kotlin'
		}
	}
	test {
		java {
			srcDirs += 'src/test/kotlin'
		}
	}
}

// All that should be needed in IDEA for tests to be recognized is to use the Spek Framework plugin.
test {
	useJUnitPlatform {
		includeEngines 'spek2'
	}
}
